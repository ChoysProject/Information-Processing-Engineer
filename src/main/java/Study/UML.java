package Study;

public class UML {


//* 다이어 그램
//
//    1. 구조적 다이어그램
//        클래스 다이어그램
//        : 클래스와 클래스가 가지는 속성 관계 표현
//        객체 다이어그램
//        : 클래스에 속한 사물
//        컴포넌트 다이어그램
//        : 실제 구현 모듈 간의 관계나 인터페이스 표현
//        배치 다이어그램
//        : 결과물, 프로세스 컴포넌트 등 물리적 요소들의 위치 표현
//        복합체 구조 다이어그램
//        : 클래스 컴포넌트의 내부 구조를 표현
//        패키지 다이어그램
//        : 요소들의 그룹화
//    
//    2. 행위 다이어그램
//        유스케이스 다이어그램
//        : 사용자의 요구를 분석
//        시퀀스 다이어그램
//        : 상호작용하는 시스템이나 객체들이 주고받는 메시지 표현
//        커뮤니케이션 다이어그램
//        상호작용 다이어그램
//        : 상호작용 다이어그램 간의 제어 흐름 표현
//        활동 다이어그램
//        상태 다이어그램
//        타이밍 다이어그램
//
//
//    
//    * 유스케이스 다이어그램
//    통합 모델링 언어에서 제공되는 고유 기능 단위
//    액터 행위자 관점에서 표현
//    구성요소
//        1. 유스케이스
//        2. 액터
//        3. 관계
//        4. 시스템
//
//        * 예제 관계
//        연관, 직접 연관
//        : 실선으로 연결 또는 방향성은 화살표로
//        포함
//        : 기본 유스케이스에서 다른 유스케이스를 반드시 포함 하는 관계
//        확장
//        : 다른 유스케이스를 선택적으로 확장 되는 관계
//        일반화
//        : 일반적인지 구체적인지 표현
//        의존 : 참조
//
//    * 유스케이스 명세서
//    : 유스케이스 안에서 액터와 시스템 간의 상호 작용 과정을 글로 자세히 표현한 것.
//    처리의 흐름에 따라서 활동 다이어그램 작성
//
//    * 활동 다이어그램
//    : 사용자의 관점에서 시스템이 수행하는 기능을 처리 흐름에 따라 순서대로 표현
//    주문 처리를 고객과 지불 담당자와 주문 담당자에 해당하는 액션들로 그룹화해서 표현
//
//    구성요소
//        1. 액티비티
//        : 작업의 실행을 의미
//        2. 액션
//        : 액티비티의 구성 단위로 분해 될 수 없는 단일 작업
//        3. 시작 노드/ 종료 노드
//        : 액션이나 액티비티의 시작과 종료
//        4. 조건 노드
//        : 조건에 따른 선택적 실행
//        5. 병합 노드
//        : 병렬 처리를 표현하기 위해 포크와 조인을 사용
//        6. 제어 흐름 : 실행 흐름
//        7. 스웜레인
//        : 주체 구분
//
//        기능 모델 검증
//        : 기능 모델링 , 유스케이스 다이어그램, 액티비티 다이어그램 후 다이어그램을 검증하고, 정적 모델링, 동적 모델링을 해야함.
//
//        기능 모델링과 정적 모델링 차이점
//        - 기능 모델링 : 사용자 관점의 요구 기능 설명
//        - 정적 모델링 : 개발자 관점 한다.
//
//    
//    * 클래스 다이어그램
//    : 클래스는 객체들의 집합으로 각 객체들이 갖는 속성과 오퍼레이션을 표현한것이다.
//
//    다중성
//    1:1 방 예상
//    1:N 인사과 조영상
//    N:M 사람들의 자격증 보유한것.
//
//    접근 제한자
//    public + 모든 접근을 허용
//    protected # 자신을 포함하는 클래스에서 상속받은 클래스에서도 참조가능
//    private - 자신을 포함한 클래스에서만 참조가능
//    package ~ 동일 패키지 내에서만 접근가능
//
//    관계
//        연관 선으로 표시
//        직접 연관 : 화살표
//        집합관계 : 빈 마름모
//        포함관계 : 검정 마름모
//        의존관계 : 점선 화살표
//        일반화 관계도 있음
//        실체화 관계 인터페이스를 구현한 것.
//
//    
//    기능 모델링, 정적모델링, 동적 모델링
//        기능 모델링 : 시스템이 제공할 기능 표현
//        정적 모델링 : 시스템 내부 구성요소를 표현
//        동적 모델링 : 시스템 내부 구성요소의 상태나 시간 또는 변화과정을 상호작용 표현
//            - ex 시퀀스 다이어그랴ㅐㅁ, 커뮤니ㅔ이션 다이어그램, 상태 다이어그램
//
//    
//    시퀀스 다이어그램
//    : 시스템이나 객체들이 메시지를 주고받으며 시간의 흐름에 따라 사용작용을 하는 과정을 액터 객체 메시지 등에 요소를 사용하여 표현
//
//    구성요소
//        1. 액터
//        2. 객체
//        3. 메시지
//            동기 화살표
//            응답 실선 화살표
//            비동기 ->
//            생성 ---> 
//        4. 생명선
//        5. 활성상자
//        6. 프레임
//
//
//
//
//    커뮤니케이션 다이어그램
//
//    스퀀스 다이어그램 순서강조와 같은 내용을 나타내지만
//    관계표현, 연관성 표현 강조
//
//    구성요소 : 
//    액터, 객체, 메시지 시퀀스 다이어그램과 동일
//    추가적으로 링크!! 라는게 있음
//
//
//    상태 다이어그램
//    : 객체들 사이에 발생하는 이벤트에 의한 객체들의 상태 변화 표현
//    구성요소
//    1. 시작상태, 종료상태
//    2. 상태 : 객체의 상태 둥근 사각형
//    3. 이벤트 상태의 변화를 주는 현상
//    4. 상태 전환 화살표 -> 
//    프레임
//
//    * 분석 모델 검증
//    : 요구사항 도출 기법을 활용하여 업무 분석 모델에 대해서 확인
//
//    * 분석 모델 검증 방법
//
//    1. 유스케이스 모델 검증 
//    : 시스템 기능에 대한 유스케이스 모형 상세화 수준 및 적정성에 대하여 점검
//    - 점검대상 : 액터 유스케이스, 유스케이스 명세서
//
//    2. 개념 수준의 분석 클래스 검증
//    : 클래스 도출, 클래스 명과 속성, 클래스들 간 관계
//
//    3. 분석 클래스 검증
//    : 스테레오 타입, 경계 및 제어 클래스 도출, 관계 및 상세화 정도
//
//    유스케이스 실현
//    스테레오 타입으로 표현 되었는지 확인
//
//    경계 바운더리 doundary 외부 액터와 상호작용을 담당
//    엔티티 시스템이 유지해야 하는 정보를 관리 하는 클래스
//    제어 control 기능의 로직 및 제어를 담당하는 클래스
//
//    * 분석 모델 검증하기
//    분석모델까지 요구사항 추적표를 작성하고 검토 의견 컬럼을 추가
//    
//    * 분석 클래스의 스테레오 타입
//    : 그냥 타당성 검토라고 생각하자 ~
	
}
