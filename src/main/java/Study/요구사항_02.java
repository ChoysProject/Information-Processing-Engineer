package Study;

public class 요구사항_02 {


//
//1. 요구사항 확인
//
//    현행 시스템 파악
//    : 개발하고자 하는 소프트웨어에 대한 이해를 높이기 위해, 현행 시스템의 적용 현황을 파악하는 것.
//
//        1. 정의
//            : 현행 시스템이 어떤 시스템으로 구성 되어있고, 제공하는 기능과 다른 시스템들과의 어떤 정보를 주고 받는지, 
//              사용하고 있는 SW, HW는 무엇이고 네트워크는 어떻게 구성이 되어있는지 확인하는 것.
//
//        2. 절차
//            : 1단계 - 현행 시스템의 구성, 기능, 인터페이스 파악
//            : 2단계 - 현행 시스템의 아키텍처, 소프트웨어 구성 현황
//            : 3단계 - 하드웨어 및 네트워크 구성 확인
//
//        
//        * 현행 시스템 구성/기능 및 인터페이스
//        1) 시스템 구성 파악
//        기현행 시스템 구성 현황은 조직의 주요 업무를 처리하는 기간 업무와 이를 지원하는 지원 업무로 구분한다.
//
//        2) 시스템 기능 파악
//        단위 업무 시스템이 현재 제공하고 있는 기능을 기술
//        계층형으로 표시한다.
//
//        3) 시스템 인터페이스 파악
//        단위 업무 시스템이 다른 단위 업무 시스템과 주고받는 데이터의 종류, 데이터 형식, 프로토콜, 연계유형, 주기 등을 명시
//        
//        * 현행 시스템 아키텍처 및 소프트웨어 구성
//        1) 아키텍처 구성도 파악
//        계층별로 어떠한 기술 요소들을 사용하는지 최상위 수준에서 그림으로 표현한 것이다.
//        기간 업무 처리 시스템을 기준으로 한다.
//
//        2) 소프트웨어 구성도 파악
//        소프트웨어들의 제품명, 용도, 라이선스 적용방식, 라이선스 수를 명시한 것이다.
//
//        라이선스 적용 방식의 기준과 보유한 라이선스 수량 파악이 중요하다.
//
//        * 현행 하드웨어 및 네트워크
//        1) 하드웨어 구성도 파악 
//        서버의 주요사항과 수량, 이중화가 적용되어 있는지 여부를 명시한 것.
//
//        2) 네트워크 구성도 파악
//        업무퍼리 시스템들이 어떠한 네트워크 구성을 가지고 있는지 표현한 것.
//
//
//    시스템 분석
//    
//    * 기술 개발 환경
//    : 운영체제, DBMS, MW를 선정할 경우 고려해야 할 사항에 대해서 기술하고, 오픈 소스 사용 시 주의해야 할 내용과 저장권 관련 정보를 제시한다.
//
//    * 운영체제
//    : 어떠한 종류를 사용하는지 하드웨어를 사람이 사용하기 쉽게 만들어주는 SW 종류가 무엇을 사용하는지 등
//        운영체제 고려사항
//        1. 가용성
//            - 고유의 장애 발생 가능성
//            - 메모리 누수
//            - 보안상 허점
//            - 버그
//        2. 성능
//            - 동시 사용자
//            - 대량 파일
//            - 메모리 크기
//        3. 기술 지원
//            - 기술 지원
//            - 정보 공유
//            - 오픈소스 여부
//        4. 주변기기
//            - 설치가능한 하드웨어
//            - 주변 기기 지원 여부
//        5. 구축비용
//            - 하드웨어 비용
//            - 라이선스 정책 및 비용
//            - 유지 및 관리 비용
//            - 총 소유 비용 (TCC)
//
//        
//    * DBMC
//    : 사용자와 데이터 베이스 사이에서 사용자가 쉽게 데이터베이스를 다룰수 있게하는 SW이다.
//    DBMS에 관하여 고려사항
//        1. 가용성
//        2. 성능
//        3. 기술 지원
//        4. 주변기기
//        5. 구축비용
//
//    * MW (미들웨어)
//    : 운영체제와 소프트웨어 사이에서 위치하는 것.
//      운영체제가 제공하는 서비스를 추가 및 확장하여 제공하는 컴퓨터 소프트웨어를 칭한다.
//
//    1) WAS 웹 어플리케이션 서버
//    : 동적인 웹 사이트
//    WAS 고려사항
//        1. 가용성
//        2. 성능
//        3. 기술지원
//        4. 구축비용
//
//    * 오픈소스
//    : 소스코드를 공개해 누구나 제공받을 수 있는 오픈 소스 라이선스 SW를 칭한다.
//        1. 라이선수 종류
//        2. 사용자 수
//        3. 기술의 지속 가능성
//
//    
//2. 요구사항 확인
//    
//    * 요구공학
//    : 요구사항을 정의하고 문서화하고, 관리하는 프로세스를 연구하는 학문이다.
//
//    * 요구사항 분류(종류, 유형)
//    1) 기능적 요구사항
//    : 시스템이 무엇(제공 기능이나, 사용자가 제공받기 원하는 것)을 하여야 하는지?
//    2) 비기능적 요구사항
//    : 개발 과정에서 지켜야할 제약조건들
//
//    관점에 따른 분류
//    1. 사용자 요구사항 : 사용자 관점, 이해하기 쉽게 표현
//    2. 시스템 요구사항 : 개발자 관점, 소프트웨어 요구사항이라고 도 함
//
//    * 요구사항 개발 프로세스
//    1) 요구사항 도출
//    요구사항이 어디에 있고, 어떻게 수집할 것인지?를 말함.
//    - 이해 관계자 쉐이크 홀더가 식별됨.
//    - 요구사항 도출기법
//        인터뷰, 설문, 워크숍, 브레인 스토밍, 유스케이스, 프로토타이핑 등
//    
//    2) 요구사항 분석
//    : 요구사항을 상충되는 것을 해결, 소프트웨어의 범위를 파악, SW환경과 어떻게 상호작용 할 것 인지 서로 이해하는것.
//    시스템 요구사항을 정제하여 소프트웨어 요구사항을 도출한다.
//
//    * 요구사항 분석기법
//    1) 요구사항 분류
//    - 요구사항이 기능, 비기능 인지
//    - 고수준 요구사항인지, 다른 원천으로 발생한 것 인지.
//    - 요구사항이 제품에 관한 것인지, 프로세스에 관한 것 인지
//    - 우선순위가 더 높은것인지
//    - 범위 를 파악
//    - 소프트웨어 생명 주기 동안 변경이 발생하는지
//
//    2) 개념 모델링
//    - 개체 관계 종속성을 반영하는것.
//
//
//    UML 다이어그램 사용
//    - 구조 다이어그램은 시스템의 정적 구조를 추상화 하여 보여줌
//    - 상태 다이어그램은 시스템 내의 동적인 행위를 보여주는 것.
//
//    요구사항 할당
//    : 요구사항 할당은 요구사항을 만족시키기 위한 아키텍처 구성 요소를 식별하는 것.
//    : 다른 구성 요소와 어떻게 상호작용 하는지 분석을 통하여 추가적인 요구 사항을 발견 할 수 있다.
//
//    요구사항 협상
//    : 두 명의 이해관계자와 서로 상충되는 내용을 요구하거나 다양한 요구사항에 대해서 한쪽을 지지학디보다는 적잘한 합의를 보는것.
//      요구사항의 우선순위를 부여함으로써 요구사항을 필터링 할 수 있다.
//
//    정형 분석
//    - 형식적으로 정의된 의미를 지닌 언어로 요구사항을 표현한다. 수학적 기호로 표현
//    - 정확하고 명확하게 표현하여 오해를 최소화 할 수 있다.
//    - 정형 분석은 요구사항 분석의 마지막 단계에서 이루어진다.
//
//    요구사항 명세
//    : 체계적으로 검토, 평가 승인 될 수 있는 문서를 작성하는것.
//    - 시스템의 정의, 시스템 요구사항, 소프트웨어 요구사항을 작성한다.
//    - 기능 요구사항은 빠짐없이 기술하고, 비기능 요구사항은 필요한 것만 기술
//
//    요구사항 확인
//    : 분석가가 요구사항을 이해했는지 확인하고, 완전한지 검증하는 것이 중요함
//
//    * 요구사항 기법
//    1) 요구사항 검토
//    : 요구사항 검증의 가장 일반적인 방법으로, 검토자 그룹을 어떻게 구성하느냐가 중요하다.
//    검토는 시스템 정의서, 시스템 사양서, 소프트웨어 요구사항 명세서를 완성한 시점에서 이루어진다.
//
//    * 프로토 타이핑
//    - 새로운 요구사항을 도출하기 위한 수단으로 엔지니어가 해석한 것은 확인하는 수단
//    장점 : 분석가의 과정을 파악, 동적인 행위가 문서나 그래픽 보델보다 이해하기 쉬움, 가변성이 감소한다. 필요하지 않은 자원 낭비하는 것을 방지한다.
//    단점 : 핵심 기능과는 멀어지고 디자인이나 품질 문제에 집중하게되고 프로토타입을 만드는 것에 대한 추가비용이듬.
//
//    * 모델 검증
//    - 의사소통을 검증하기 위하여 정적 분석을 수행하는것에 유용하다.
//
//    * 인수 테스트
//    - 요구사항을 만족시키는지
//    - 각각의 요구사항들을 어떻게 확인 할 것이지에 대한 계획이 있어야함
//    종류
//        사용자 인수 테스트 : 사용자가 시스템 사용의 적절성 여부 확인
//        운영상의 인수 테스트 : 시스템 관리자가 시스템 인수 시 수행
//        계약 인수 테스트 : 계약 조건 준수 여부 확인
//        규정 인수 테스트 : 정부지침 법규 등에 맞는지
//        알파검사 : 개발자 환경에서 뒤에서 사용자가 직접 테스트 
//        베타검사 : 실업무에서 사용자가 직접 시행하는 것.
//
//    * 요구사항의 기술적 타당성 검토
//    : 요구사항이 개발하고자 하는 응용 소프트웨어에 미칠 여ㅛㅇ향에 대해서 검토
//    
//    요구사항 기술적 타당성 검토 4단계
//    성능 및 용량 산정의 적정성
//
//
//    
//    

}
